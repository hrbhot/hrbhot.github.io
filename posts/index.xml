<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mémo de Yin | 备忘录</title>
    <link>https://hrbhot.github.io/posts/</link>
    <description>Recent content in Posts on Mémo de Yin | 备忘录</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>hrbhot@gmail.com (Yin)</managingEditor>
    <webMaster>hrbhot@gmail.com (Yin)</webMaster>
    <lastBuildDate>Sun, 27 Oct 2019 23:22:25 +0100</lastBuildDate>
    
	<atom:link href="https://hrbhot.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mdada创建raid1分区</title>
      <link>https://hrbhot.github.io/posts/mdada%E5%88%9B%E5%BB%BAraid1%E5%88%86%E5%8C%BA/</link>
      <pubDate>Sun, 27 Oct 2019 23:22:25 +0100</pubDate>
      <author>hrbhot@gmail.com (Yin)</author>
      <guid>https://hrbhot.github.io/posts/mdada%E5%88%9B%E5%BB%BAraid1%E5%88%86%E5%8C%BA/</guid>
      <description>用fdisk 把硬盘的分区都删除。
 树形列出硬盘和分区
lsblk -o NAME,SIZE,FSTYPE,TYPE,MOUNTPOINT  创建为md0的 raid1 分区 sdb/sdc是第二块和第三块硬盘
sudo mdadm --create --verbose /dev/md0 --level=1 --raid-devices=2 /dev/sdb /dev/sdc  格式化分区
mkfs.ext4 -F /dev/md0  挂载分区
mkidr -p /data mount /dev/md0 /data  检测分区是否已经正常挂载
df -h -x devtmpfs -x tmpfs  保存自动加载 mdadm配置
mdadm --detail --scan | sudo tee -a /etc/mdadm/mdadm.conf  加载到ram里面，在引导可用
update-initramfs -u  添加到启动以便重启自动加载
echo &#39;/dev/md0 /mnt/md0 ext4 defaults,nofail,discard 0 0&#39; | sudo tee -a /etc/fstab   参考来源 https://www.</description>
    </item>
    
    <item>
      <title>Mac下grep 使用查找某文件包含的内容</title>
      <link>https://hrbhot.github.io/posts/mac%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E5%86%85%E5%8C%85%E5%90%AB%E7%9A%84%E6%96%87%E5%AD%97/</link>
      <pubDate>Sun, 27 Oct 2019 20:10:36 +0100</pubDate>
      <author>hrbhot@gmail.com (Yin)</author>
      <guid>https://hrbhot.github.io/posts/mac%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E5%86%85%E5%8C%85%E5%90%AB%E7%9A%84%E6%96%87%E5%AD%97/</guid>
      <description>grep -n &amp;ldquo;文件内容&amp;rdquo; -r ./</description>
    </item>
    
    <item>
      <title>Nextcloud</title>
      <link>https://hrbhot.github.io/posts/nextcloud/</link>
      <pubDate>Sun, 27 Oct 2019 19:38:11 +0100</pubDate>
      <author>hrbhot@gmail.com (Yin)</author>
      <guid>https://hrbhot.github.io/posts/nextcloud/</guid>
      <description>nextcloud docker-compose 安装
 下载docker-compose 的nextcloud脚本
git clone https://github.com/wahyd4/aria2-ariang-x-docker-compose.git  进入nextcloud目录
cd aria2-ariang-x-docker-compose/nextcloud  拉docker镜像以及检测是否有错误。
docker-compose up  修改 data目录权限，否则会报502错误，或者 “Your data directory is readable by other users ”
chown -R www-data data chmod -R 0770 daTA  运行nextcloud ,并到前端注册用户名密码。完成。
docker-compose up -d  补充 修改 nextcloud/config/config.php 文件，添加
&#39;check_data_directory_permissions&#39; =&amp;gt; false,  否则不是出现502错误，就是500错误。
  </description>
    </item>
    
    <item>
      <title>使用ddns把动态ip绑定到域名</title>
      <link>https://hrbhot.github.io/posts/%E4%BD%BF%E7%94%A8ddns%E7%BB%91%E5%AE%9A%E5%8A%A8%E6%80%81ip%E5%88%B0%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Sun, 27 Oct 2019 17:34:25 +0100</pubDate>
      <author>hrbhot@gmail.com (Yin)</author>
      <guid>https://hrbhot.github.io/posts/%E4%BD%BF%E7%94%A8ddns%E7%BB%91%E5%AE%9A%E5%8A%A8%E6%80%81ip%E5%88%B0%E5%9F%9F%E5%90%8D/</guid>
      <description>公司的box是orange business，竟然不是固定ip。最近折腾内网的nas因为这个事情折腾了2天。 方案是用 ddns https://github.com/NewFuture/DDNS
 申请腾讯的DNSPOD，把域名添加到里面，然后到现有到域名商那里自定义dns添加f1g1ns1.dnspod.net， f1g1ns2.dnspod.net 。
 在DNSPOD密钥管理里面，添加API ，记住ID和TOKEN字段。
 用pip 安装 ddns
pip install ddns  编辑config.json文件 id -&amp;gt; DNSPOD API id, ipv4 -&amp;gt; 修改为自己的域名 index4 -&amp;gt; &amp;ldquo;public&amp;rdquo; ipv6 -&amp;gt; 清空变成 [] tokend -&amp;gt; DNSPOD API token
 执行ddns 命令,提示域名已经指向了当前的动态ip地址。这是在DNSPOD的控制台也可以看到这时候IP已经变成了box的动态ip。
 定时任务，需要把github clone到本地,给task.sh和run.py加权限运行。
运行 cat /etc/cron.d/ddns  任务已经添加到了cron
  </description>
    </item>
    
    <item>
      <title>Centos安装docker的错误解决</title>
      <link>https://hrbhot.github.io/posts/centos/</link>
      <pubDate>Tue, 22 Oct 2019 23:44:51 +0200</pubDate>
      <author>hrbhot@gmail.com (Yin)</author>
      <guid>https://hrbhot.github.io/posts/centos/</guid>
      <description>为了保持多样性，新弄的服务器装成了centos，安装docker的时候出现了一个小问题。 按照官方向导在运行
sudo yum install docker-ce docker-ce-cli containerd.io  出现了以下错误
package docker-ce-3:19.03.4-3.el7.x86_64 requires containerd.io &amp;gt;= 1.2.2-3, but none of the providers can be installed  解决办法是先运行了
yum update  来升级当前系统，之后用dnf安装
dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm  然后再安装官方步骤走即可，直到运行
 sudo docker run hello-world  </description>
    </item>
    
    <item>
      <title>在phpmyadmin中用sql语句修改root密码</title>
      <link>https://hrbhot.github.io/posts/%E5%9C%A8phpmyadmin%E4%B8%AD%E7%94%A8sql%E8%AF%AD%E5%8F%A5%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81/</link>
      <pubDate>Sun, 20 Oct 2019 22:35:54 +0200</pubDate>
      <author>hrbhot@gmail.com (Yin)</author>
      <guid>https://hrbhot.github.io/posts/%E5%9C%A8phpmyadmin%E4%B8%AD%E7%94%A8sql%E8%AF%AD%E5%8F%A5%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81/</guid>
      <description>为了统一实验环境，需要修改docker 的mysql密码 ，之前有安装phpmyadmin 之前用sql语句修改。
update user set authentication_string=PASSWORD(&amp;quot;password&amp;quot;) where User=&#39;root&#39;;  </description>
    </item>
    
    <item>
      <title>Mac环境docker访问宿主机ip</title>
      <link>https://hrbhot.github.io/posts/mac%E7%8E%AF%E5%A2%83docker%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BAip/</link>
      <pubDate>Sun, 20 Oct 2019 22:32:04 +0200</pubDate>
      <author>hrbhot@gmail.com (Yin)</author>
      <guid>https://hrbhot.github.io/posts/mac%E7%8E%AF%E5%A2%83docker%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BAip/</guid>
      <description>mac测试环境下遇到一个问题，不能访问宿主机的端口。开始的时候错误的用127.0.0.1的地址访问，访问的是docker内容器的地址。 正确的方法是用
 docker.for.mac.host.internal  这个地址来访问</description>
    </item>
    
    <item>
      <title>Docker迁移mysql的数据问题</title>
      <link>https://hrbhot.github.io/posts/docker%E8%BF%81%E7%A7%BBmysql%E7%9A%84%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 20 Oct 2019 20:46:33 +0200</pubDate>
      <author>hrbhot@gmail.com (Yin)</author>
      <guid>https://hrbhot.github.io/posts/docker%E8%BF%81%E7%A7%BBmysql%E7%9A%84%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</guid>
      <description>今天周日难得有空闲，把之前的joomla 1.5 迁移到本地环境测试升级到version 3. 在迁移过程中 遇到了mysql 错误。
 [ERROR] --initialize specified but the data directory has files in it. Aborting.  解决的办法是，要把之前的mysql 数据先转移到一个临时文件夹，然后运行 Docker-compose up 生成镜像。再把mysql数据cp回来。
用docker-compose迁移一个mysql php nginx的joomla网站到本地环境 15分钟内搞定。</description>
    </item>
    
    <item>
      <title>备忘录的安装记录</title>
      <link>https://hrbhot.github.io/posts/%E5%A4%87%E5%BF%98%E5%BD%95%E7%9A%84%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 20 Oct 2019 13:58:38 +0200</pubDate>
      <author>hrbhot@gmail.com (Yin)</author>
      <guid>https://hrbhot.github.io/posts/%E5%A4%87%E5%BF%98%E5%BD%95%E7%9A%84%E5%AE%89%E8%A3%85/</guid>
      <description> 1. 安装go hugo git clone https://github.com/gohugoio/hugo.git cd hugo go install  2. 设置主题 git submodule add https://github.com/panr/hugo-theme-hello-friend.git themes/hello echo &#39;theme = &amp;quot;hello&amp;quot;&#39; &amp;gt;&amp;gt; config.toml  3. 发布文章 hugo new posts/my-first-post.md  4. 启动预览 hugo server hugo server -D # 草稿 draft 为true的文章  5. 部署项目 上传public内的文件到hrbhot.github.io项目 cd public git init git add . git commit -m &#39;for init blog&#39; git remote add origin git@github.com:hrbhot/hrbhot.github.io.git #替换成自己的git name git push -u origin master  </description>
    </item>
    
  </channel>
</rss>